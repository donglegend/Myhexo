<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东胜</title>
  <subtitle>阳光总在风雨后</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://donglegend.github.io/"/>
  <updated>2017-06-28T02:08:29.000Z</updated>
  <id>http://donglegend.github.io/</id>
  
  <author>
    <name>东胜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>青海小记</title>
    <link href="http://donglegend.github.io/2017/06/20/%E9%9D%92%E6%B5%B7%E5%B0%8F%E8%AE%B0/"/>
    <id>http://donglegend.github.io/2017/06/20/青海小记/</id>
    <published>2017-06-20T12:59:31.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>踏上青青草原，看到了一群牦牛，这里没有灰太狼！<br><a id="more"></a></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>今天2017年06月19日，离开清凉的西宁，回归闷热的首都。</p>
<h2 id="故事的开头"><a href="#故事的开头" class="headerlink" title="故事的开头"></a>故事的开头</h2><p>故事还是从头说起，这次任性的旅行开始于2017年06月08号的下午，好像是周四，媳妇发微信说她要去成都玩耍，不想上班了。看到这个，我瞬间就知道她在想什么了，出去旅行，她说过很多次了，由于各种原因或者借口，一直没去。这次，我不忍心再拒绝，我明白她只是想出去玩耍，而成都只不过是恰好进入了她的脑海。so，我很快回复，成都这么热，何不去青海呢，她说好啊，然后我们就开始订机票，前后大概不到半个小时就订好了机票，决定了为期4天的旅行，15号早出发，19号早回来上班。</p>
<h2 id="旅行前的时光"><a href="#旅行前的时光" class="headerlink" title="旅行前的时光"></a>旅行前的时光</h2><p>寻常的天气和生活很过就成了过去式，过了一个周末，到了11号，周日的晚上，和翔哥提了一句，我们下周要去青海，因为翔哥去年刚去过，然后翔哥就很热心得开始给我们做攻略，大概是从南线出发北线回去的环绕青海湖旅行，途径西宁市—&gt;塔尔寺—&gt;日月山—&gt;倒淌河—&gt;黑马镇—&gt;茶卡盐湖—&gt;沙岛，媳妇很认真的做了笔记，这时候才知道，要租车，带够现金和食物。因为要自驾，我和我媳妇都是去年刚拿的驾照，并没有实际驾车经验，所以有点小怕，不过这点小事，我就直接揽了过来。然后买防晒衣，帽子什么的，一直到14号晚上才又查了查攻略，收拾了行李，预约了15号凌晨4点50的出租。</p>
<h2 id="第一天之机场"><a href="#第一天之机场" class="headerlink" title="第一天之机场"></a>第一天之机场</h2><p>2017年06月15日凌晨4点40分，师傅准时来接，很顺利的，大概5点15分就到了T3航站楼，没什么意外的取登机牌，过安检，然后又等了20分钟就到了登机时间，早上6点55分准时起飞，由于起的太早，在飞机上吃了早餐，睡了一觉，睁开眼，飞机就落地了，正点9点10分。然后直奔西宁曹家堡机场的神州租车咨询点，登记了驾驶证等信息，出门右转200米左右到T1航站楼前面取车，中间遇到一些小插曲，忘记了信用卡的密码，车子也由于一些原因换了两次，最终还是很愉快的提车走人，租的是丰田凯美瑞，租期4天，算上保险903大洋。俩迷糊蛋分工合作，我负责开车，媳妇负责导航，第一站目的地西宁市区。</p>
<h2 id="第一天之西宁"><a href="#第一天之西宁" class="headerlink" title="第一天之西宁"></a>第一天之西宁</h2><p>2017年06月15日中午大概12点就到了西宁市，新手没经验，绕了好几条街，才找到了一个停车的地方，订了如家酒店，然后出去直奔莫家街，吃了一盒特色小吃酸奶，去了马忠食府，买了酿皮，逛完莫家街，去了顺风肥牛火锅店，总体来说这里的小吃也没吃出什么特别的地方来，哈哈，可能我不是个吃货。然后俩人去逛了逛超市，商场，买了零食和衣服（天哪，这里的衣服真的很便宜），回去酒店睡了午觉，傍晚六点起来（咋不睡到天黑呢），然后出去逛了 西宁市，特意去了一个叫 西宁东関大寺，在哪里遇到了一个小屁孩，黑黑的，特别调皮，他陪我们玩耍逛街，带我们去买小帽子，可是我才不要戴那个小帽子，因为我尊重信仰但我没有信仰哇，给小屁孩拍了照片，去旁边的小胡同里穿过，这里才真正感受到本地特色，所谓出名的莫家街只不过是用来骗外地人的，商业化气息太浓重，在小胡同里买了粽子吃，甜甜的加了蜂蜜水很好吃，又买了一只烧鸡和一大块火馍馍（就是烤出来的一个大面包），又买了西瓜等等零食直接扔到了车上准备后几天吃，大概九点，天色偏黑，打道回府睡觉。<br><img src="/images/diary/qinghai/1_1.jpeg" alt=""> <img src="/images/diary/qinghai/1_2.jpeg" alt=""> <img src="/images/diary/qinghai/1_3.jpeg" alt=""></p>
<h2 id="第二天之途景"><a href="#第二天之途景" class="headerlink" title="第二天之途景"></a>第二天之途景</h2><p>2017年06月16日早上九点出发，目的地塔尔寺，途中有盘旋山路，到处都是草原，蓝天白云，停了几次车，欣赏风景，中途爬到一个山顶，在哪里买了一个漂亮的披肩，哪里能看到雪山，稍微停留了一段时间，然后直奔塔尔寺，到了之后，并没有买票进去，因为看起来感觉并不是很吸引人，远观足矣。然后离开去倒淌河，半路找了树荫，吃了烧鸡。本来以为塔尔寺不怎么样，名声在外的倒淌河应该会不错，门票40，进去之后也是略有失望，一片草原围着一汪湖水，水边立着大石，石上刻着倒淌河，我就想这和刻着天涯海角的那块石头有什么区别？可能是我太俗，体会不到倒淌河的美丽。之后一路向西，真奔青海湖，就到了二郎剑景区，停了车，看了看，决定去黑马河乡住宿，就没去景区直接离开了二郎剑，后来想想其实还是应该去二郎剑看看的，毕竟是开发出来的景区了。<br><img src="/images/diary/qinghai/2_1.jpeg" alt=""> <img src="/images/diary/qinghai/2_2.jpeg" alt=""> <img src="/images/diary/qinghai/2_3.jpeg" alt=""></p>
<h2 id="第二天之黑马河草原"><a href="#第二天之黑马河草原" class="headerlink" title="第二天之黑马河草原"></a>第二天之黑马河草原</h2><p>2017年06月16日傍晚七点，在黑马河乡找了宾馆住了下来，俩人吃了泡面之后，计划去湖边看看，宾馆老板娘说步行30分钟就可以到了，然后我俩就步行去湖边。黑马河乡只有一条街，长度大概一公里多，这是个神奇的地方，这条街上只有宾馆和饭店，我见过的唯一一条街上全是宾馆的地方，而且酒店饭店一体化，都是自家的。快走到街头的时候，旁边有一条胡同，遂决定抄近路直通湖边，草原被围栏围了起来，里面是牧场，有很多的牦牛和马。我俩冒着被人抓的风险，勇敢的跨越了一道道围栏，眼看着离湖边越来越近，我们却不得不停下脚步，因为前面是湿地，就是草里充满了水，松软泥泞，根本没办法行走。这个时候，我俩还没意识到有什么危险，很自然的想横向绕一下，结果越绕越远，越走越偏，不知不觉身边就都是湿地了，我看了看时间和天色，望了望湖边，心里开始着急。我告诉媳妇，一定要赶在天黑之前走出去，湖边不去了，然后开始寻找出去的路，随着太阳落下去，蚊虫越来越多，两条腿上像芝麻饼似得爬着一层层的蚊虫，已经顾不了这么多，然后直接趟过了一块湿地，媳妇的鞋子全是泥，还好走出了湿地的范围，太阳还没完全沉下去。放松了心情，才发现，脚踝处被咬了几十个疙瘩，很痒，几乎流血，这儿的蚊子可真厉害。之后在走向路边的草地了，发现了一大块田鼠洞，一大群田鼠在洞里探出脑袋，爬来爬去的，媳妇被吓得不轻。天色渐暗，傻傻两个人，背向湖边，越走越远，向着旅馆，越走越近。</p>
<h2 id="第三天之青海湖"><a href="#第三天之青海湖" class="headerlink" title="第三天之青海湖"></a>第三天之青海湖</h2><p>2017年06月17日早上8点，起床发现外面淋淋漓漓下着雨，宾馆里的其他游客早就已经离开了，来黑马河乡的目的是看日出，早上5点30分的日出。因为前一天太累了，所以我俩直接放弃看日出，然而下起来雨，也没有日出，😆。想起了我俩曾经一起看过的日出，泰山的，北京的。然后，去宾馆旁边吃了早餐，要了一碗粉汤，一个花卷，吃饭的时候和老板聊了起来，老板和店员都很淳朴，老板是都兰人，聊了青海的一些风土人情，最后老板还送了我们一点他们家的茶叶，说是要加点盐喝。然后，就退房，开车去了湖边，几分钟就到了，下着小雨，刚到湖边，就看到了湖边矗立着的那块石碑，上半截不是很平滑，断裂的痕迹，上书青海湖三个大字，顺着湖边走走，看到了一大群野鸭子，恣意放肆的游荡于湖面之上。我调皮的扔了一块石头过去，然后有两只鸭子起飞，掠过湖面，飞向湖的对面，慢慢消失不见。这个湖，确实比我们那的黄河宽。<br><img src="/images/diary/qinghai/3_1.jpeg" alt=""> <img src="/images/diary/qinghai/3_2.jpeg" alt=""> <img src="/images/diary/qinghai/3_3.jpeg" alt=""></p>
<h2 id="第三天之茶卡盐湖"><a href="#第三天之茶卡盐湖" class="headerlink" title="第三天之茶卡盐湖"></a>第三天之茶卡盐湖</h2><p>2017年06月17日上午12点左右，到达了茶卡盐湖，直接买了门票就冲了进去，天气偶尔下着雨，偶尔会有阳光。这里整个是盐晶的世界，白花花的，远看像冰块，加上当时阴天，微冷，感觉像是走进了冬天。在这里，和媳妇一起拍摄了很多照片，可是我拍摄技术太过随意自然，被媳妇骂，😆。大概逛了两个多小时，饿的不行了，就出去吃了旁边的川菜自助，说是自助，其实就是八个菜，一个汤，每人40大洋。这里的菜都是平常熟悉的菜，来青海三天，终于吃到了正常点的饭菜，所以吃了两回，吃的很撑。然后开车原路返回，途径黑马河，直奔沙岛。<br><img src="/images/diary/qinghai/3_4.jpeg" alt=""> <img src="/images/diary/qinghai/3_5.jpeg" alt=""> <img src="/images/diary/qinghai/3_6.jpeg" alt=""></p>
<h2 id="第三天之金沙湾"><a href="#第三天之金沙湾" class="headerlink" title="第三天之金沙湾"></a>第三天之金沙湾</h2><p>2017年06月17日下午6点，媳妇非要开车，让她开了两个小时，开了一百多公里，到达金沙湾，离沙岛很近了，这里已经到处能看到沙漠了，确切说应该叫做沙丘。在金沙湾停了车，这里有一个小景区，一个本地阿姨说玩滑沙，看风景，一人10个大洋，被我硬生生砍价砍到了两人10个大洋，😆。然后我和媳妇进去带着滑板爬到了一个最高的沙丘，整个沙漠只有我们两个人，玩的很放肆，也很开心，这里真是一个天然滑沙的地方，坡度大概有七十多度，长度大概三十米，特别爽，媳妇第一个滑下去，栽了跟头，弄了个狗吃屎，哈哈。然后我们又来回玩了几次，搞得脸蛋都红扑扑的像苹果，有点高原反应，然后就出去开车直奔沙岛，在天黑之前希望能找到一个住宿的，网上说沙岛只有一个宾馆，就是沙岛宾馆，又走了二十公里左右，经过一段荒无人烟的路（中途怀疑走错了路），终于到了沙岛。这里特别小，建筑物数量不超过10栋，我们直奔沙岛宾馆登记住宿，旁边三个蒙古包似得白色大房子是职工宿舍。前台姐姐说晚上八点半有篝火晚会，我们就出去溜达，下着雨，篝火晚会延迟了，我们看到旁边有一个湖畔商务宾馆，上面写着庆祝2017年06月17日开张，发现就是今天啊，真是个伟大喜庆的日子，哈哈，从今以后这里就有了第二家宾馆。去看了看，价格比沙岛宾馆便宜，环境略有不如，刚装修好，带着一股甲醛味道，还不太适合入住。<br><img src="/images/diary/qinghai/3_7.jpeg" alt=""> <img src="/images/diary/qinghai/3_8.jpeg" alt=""> <img src="/images/diary/qinghai/3_9.jpeg" alt=""></p>
<h2 id="第四天之沙岛"><a href="#第四天之沙岛" class="headerlink" title="第四天之沙岛"></a>第四天之沙岛</h2><p>2017年06月18日上午八点，准点起床去餐厅吃早餐，早餐券是沙岛宾馆赠送的。早餐是粥、包子、花卷、鸡蛋、还有一盘西蓝花菜。值得一提的是，包子是萝卜肉馅的，特别香，特别好吃，记得上一次吃到这个味道的包子还是在我六岁那样，因为之后家里好像一直没有包过肉包子，而在外边吃的包子像是纸板碾碎后包的浆糊一样，简直不能想象。用完餐，就买了门票，做了景区班车去沙岛景点，大概十分钟路程，途径月牙湖。下了车之后，我和媳妇骑了马去湖边，不到一公里的路程，骑马当然是收费的哦，每人五十大洋。这里的湖水特别好看，清澈，背靠沙丘，水天接壤，美的像一块净土，人也特别少，整个湖边就我们两个人，尝了尝水的味道，微咸，咸度比海水要淡很多。然后我俩就奔着最高的沙丘而去，看着不远，确爬的很费劲。努力之后必有回报，风景果然还是高处最美，在沙丘顶端做了有半个小时，明媚的阳光，恰到好处的凉风，蓝天白云仿佛触手可及，眼前就是一望无际的青色湖面，好想一直这么坐下去。这里的沙丘就像一条巨龙，沙丘线蔓延的很长，两侧是坡度很大的斜面，我们沿着沙丘顶向着太阳湖的方向一路走过去。到了太阳湖，又尝了尝味道，淡水湖，月牙湖和太阳湖是这里唯一的两个比较大的淡水湖。有时候不得不惊叹于大自然的鬼斧神工，巨大的咸水湖里竟然隐藏着两个淡水湖，湖边遍地的小黄花。<br><img src="/images/diary/qinghai/4_1.jpeg" alt=""> <img src="/images/diary/qinghai/4_3.jpeg" alt=""> <img src="/images/diary/qinghai/4_4.jpeg" alt=""> <img src="/images/diary/qinghai/4_2.jpeg" alt=""> <img src="/images/diary/qinghai/4_5.jpeg" alt=""> <img src="/images/diary/qinghai/4_6.jpeg" alt=""></p>
<p>这里应该就是这次旅行的最后景点了，带着不舍，去吃了这里的特色菜 炕锅羊排之后就奔向了西宁机场，因为要还车，就离开的比较早。且行且珍惜，回归的路总是比来时的路少点期盼和激动。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>再次踏上青青草原，一路向东，愿我们的生活也像这片天空和草原，充满活力和阳光。</p>
<p>这里有自由的味道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;踏上青青草原，看到了一群牦牛，这里没有灰太狼！&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://donglegend.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="写作" scheme="http://donglegend.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>vuex理解之modules小记</title>
    <link href="http://donglegend.github.io/2017/05/11/vuex%E7%90%86%E8%A7%A3%E4%B9%8Bmodules%E5%B0%8F%E8%AE%B0/"/>
    <id>http://donglegend.github.io/2017/05/11/vuex理解之modules小记/</id>
    <published>2017-05-11T06:31:00.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>好记性不如烂笔头</p>
<a id="more"></a>
<h2 id="demo预览"><a href="#demo预览" class="headerlink" title="demo预览"></a><a href="http://donglegend.com/effects/vuex-study/dist/" target="_blank" rel="external">demo预览</a></h2><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><a href="https://github.com/donglegend/vuex-study" target="_blank" rel="external">源代码</a></h2><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>关于vuex，其实很久以前就研究使用过，还研究过 flux，redux之类的体系，当时感觉对于 state，action，dispatch，views等这套体系流程已经很了解，结果呢近一年不用，再次证明了人类大脑的局限性。这里不做任何文档教程，因为官网文档已经很详细，这里只谈理解和注意点。</p>
<h2 id="vuex核心"><a href="#vuex核心" class="headerlink" title="vuex核心"></a>vuex核心</h2><p>五大核心属性：</p>
<ul>
<li>State    </li>
<li>Getters</li>
<li>Mutations</li>
<li>Actions</li>
<li>Modules</li>
</ul>
<h2 id="四大辅助函数"><a href="#四大辅助函数" class="headerlink" title="四大辅助函数"></a>四大辅助函数</h2><ul>
<li>mapState</li>
<li>mapGetters</li>
<li>mapActions</li>
<li>mapMutations</li>
</ul>
<h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><ul>
<li><p>State是数据data的存储仓库，可划分为子模块module，每个module有自立的上下文对象context，有自己的state、mutation、action、getters、modules等等体系</p>
</li>
<li><p>Getters 主要用来从State中获取数据，优点是具有通用性</p>
</li>
<li><p>Mutations 是用来更新state状态仓库里的数据的，唯一更改数据地方，实时同步修改，<b style="color: red">不能异步,不能异步,不能异步</b></p>
</li>
<li><p>Actions 主要补充增加 异步更新 state仓库数据的功能，内部依然是触发Mutation来实现</p>
</li>
<li><p>Modules 为了划分state模块，便于管理数据仓库</p>
</li>
</ul>
<p>注意：<b style="color: red">Getters，Mutations，Actions无论是不是在module块中，都会直接挂载到 vuex的实例 store上，只有state保持链式命名空间，比如，store.state.module[key]等等,所以如果是子模块的state，直接用辅助函数mapState是获取不到的.</b></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好记性不如烂笔头&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="vue" scheme="http://donglegend.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>惫懒人生</title>
    <link href="http://donglegend.github.io/2017/04/29/%E6%83%AB%E6%87%92%E4%BA%BA%E7%94%9F/"/>
    <id>http://donglegend.github.io/2017/04/29/惫懒人生/</id>
    <published>2017-04-29T08:09:23.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>惫懒得人生！</p>
<a id="more"></a>
<p>人间四月暖风，阳光黄昏绿树，操场风筝欢笑，待业惫懒青年！</p>
<p>四月天是属于林徽因的，她笔下的四月已足够美好，温暖而柔情，帝都的四月就是蓝天白云微风暖洋洋。</p>
<p>日升日落又一天，春夏秋冬又一年，如是而往复。</p>
<p>对于学校，总是有一种特殊的喜爱，走进校园，走进食堂，走进教室，感受着校园里宁静而单纯的气氛，欺骗自己又回到了当年那个岁月。</p>
<p>那个岁月正青春，简单的叛逆，可爱的文艺，读唐诗宋词，写爱上层楼！</p>
<p>青春已逝，文艺早褪，白衣飘飘的年代掉进了黑色的夜里。</p>
<p>当年的风花雪月、良辰美景也改成了真他妈的好看、真好！</p>
<p>最美好的四月里，每天感受着真他妈好的蓝天绿树阳光，惫懒到极致！</p>
<p>爱阳光，爱读书，爱在阳光下读书，暖暖的微风却始终吹不动书的下一页。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;惫懒得人生！&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://donglegend.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://donglegend.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Promise函数then的奥秘</title>
    <link href="http://donglegend.github.io/2017/04/06/Promise%E5%87%BD%E6%95%B0then%E7%9A%84%E5%A5%A5%E7%A7%98/"/>
    <id>http://donglegend.github.io/2017/04/06/Promise函数then的奥秘/</id>
    <published>2017-04-06T08:30:42.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Promise的then方法可以接受前一个函数的执行结果，还可以保证另一个Promise的顺序执行，这到底是怎么做到的呢？<br><a id="more"></a><br>很久以前写过一篇 <a href="http://donglegend.com/2016/09/11/promise%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/" target="_blank" rel="external">Promise原理探究</a> ，现在想来确实简单幼稚了很多，但是基本思想基于 callback 原理实现的大方向是没问题的，就是版本实现过于简单，仅仅为了理解，不投入使用。</p>
<h2 id="原理图-先上图"><a href="#原理图-先上图" class="headerlink" title="原理图(先上图)"></a>原理图(先上图)</h2><p><img src="/images/promise/a.png" alt=""></p>
<h2 id="问题需求"><a href="#问题需求" class="headerlink" title="问题需求"></a>问题需求</h2><p>如何保证多个 promise 顺序执行？<br>实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span>  <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"f1 ok!"</span>)</div><div class="line">			resolve(<span class="string">"f1 ok!"</span>);</div><div class="line">		&#125;, <span class="number">1000</span>)</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span>  <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"f2 ok!"</span>)</div><div class="line">			resolve(<span class="string">"f2 ok!"</span>);</div><div class="line">		&#125;, <span class="number">3000</span>)</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span>  <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"f3 ok!"</span>)</div><div class="line">			resolve(<span class="string">"f3 ok!"</span>);</div><div class="line">		&#125;, <span class="number">2000</span>)</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然如果要并行的话，我们很容易想到 Promise.all 方法:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Promise.all</span>([<span class="built_in">f1</span>(), <span class="built_in">f2</span>(), <span class="built_in">f3</span>()]).then(<span class="meta">function</span> (<span class="meta">data</span>)&#123;</div><div class="line">	console.log(<span class="meta">data</span>)</div><div class="line">&#125;)</div><div class="line">// <span class="built_in">f1</span> ok! </div><div class="line">// <span class="built_in">f3</span> ok! </div><div class="line">// <span class="built_in">f2</span> ok! </div><div class="line">// [<span class="string">"f1 ok!"</span>, <span class="string">"f2 ok!"</span>, <span class="string">"f3 ok!"</span>]</div></pre></td></tr></table></figure></p>
<p>如果要顺序执行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">f1().then(f2).then(f3)</div><div class="line"><span class="comment">// f1 ok!</span></div><div class="line"><span class="comment">// f2 ok!</span></div><div class="line"><span class="comment">// f3 ok!</span></div><div class="line"></div><div class="line"><span class="comment">//或者这样</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">all</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</div><div class="line">    all.forEach(<span class="function">(<span class="params">p, index</span>) =&gt;</span> &#123;</div><div class="line">        promise = promise.then(p)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">f([f1, f2, f3])</div></pre></td></tr></table></figure></p>
<p><b style="color: red;">那么问题来了，then是如何做到顺序执行的呢，参数既可以是一个普通函数，也可是是一个返回promise的函数？</b></p>
<h2 id="then的奥秘"><a href="#then的奥秘" class="headerlink" title="then的奥秘"></a>then的奥秘</h2><p>很多实现promise的库都比较复杂，如果自己实现的话，可以借鉴下面简单的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> promise = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> ret = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> &amp;&amp; onFulfilled(value) || value;</div><div class="line">			<span class="keyword">if</span> (ret &amp;&amp; <span class="keyword">typeof</span> ret[<span class="string">'then'</span>] == <span class="string">'function'</span>) &#123;</div><div class="line">				ret.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">					resolve(value);</div><div class="line">				&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">					reject(reason);</div><div class="line">				&#125;);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				resolve(ret);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">errback</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">			reason = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> &amp;&amp; onRejected(reason) || reason;</div><div class="line">			reject(reason);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (promise._status === <span class="string">'PENDING'</span>) &#123;</div><div class="line">			promise._resolves.push(handle);</div><div class="line">			promise._rejects.push(errback);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (promise._status === FULFILLED) &#123; </div><div class="line">			callback(promise._value);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (promise._status === REJECTED) &#123;</div><div class="line">			errback(promise._reason);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重点在then的实现，看上述代码，<b style="color: red;">每个then返回的是什么，是一个新的 Promise，一个新的 Promise，一个新的 Promise</b><br>第二个重点是，<b style="color: red;">在内部又处理了一个 回调函数运行结果是  一个 promise的 判断</b>，如果是那么等待这个promise运行结束才调用 resolve 更改状态，<b style="color: red;">关键是resolve的调用时机，resolve的调用时机，</b>才能够往下执行，这两步就是then函数的关键。<br>是不是 有点晕，请看最开始的图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise的then方法可以接受前一个函数的执行结果，还可以保证另一个Promise的顺序执行，这到底是怎么做到的呢？&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="promise" scheme="http://donglegend.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>js继承模式</title>
    <link href="http://donglegend.github.io/2017/04/01/js%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>http://donglegend.github.io/2017/04/01/js继承模式/</id>
    <published>2017-04-01T03:49:21.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>一切的继承都只是为了复用，为了解放劳动力！<br>然而遗忘是我们的天性，曾经懂得！<br><a id="more"></a></p>
<h2 id="开篇废话"><a href="#开篇废话" class="headerlink" title="开篇废话"></a>开篇废话</h2><p>其实很不想写这篇，关于js继承的文章遍地皆是，继承应该是一种思想模式，很多时候我们并不会去使用它，然而我们却必须懂它。我也很少用它，因为大部分直接扩展属性，$.extend()就直接解决了。可能在大型架构，尤其是游戏中，继承是一个很重要的模式，比如精灵类Sprite,说到底，<b style="color: red">一切都是提高代码复用率</b>。</p>
<p>废话还没结束，申明一下，这里针对的 javascript 的继承，假如我们已经理解了js中的 对象  的概念，还知道一个叫做 prototype 的属性的东西。</p>
<h2 id="模式1-设置原型"><a href="#模式1-设置原型" class="headerlink" title="#模式1. 设置原型"></a>#模式1. 设置原型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name || <span class="string">"parent"</span>;</div><div class="line">&#125;</div><div class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 子构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 调用继承</span></div><div class="line">extend(Child, Parent);</div><div class="line"><span class="comment">// 继承实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">C, P</span>)</span>&#123;</div><div class="line">	C.prototype  = <span class="keyword">new</span> P();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child();</div><div class="line">c.say() <span class="comment">// parent</span></div></pre></td></tr></table></figure>
<p>可以看到，这个模式的继承只有一行代码，<b style="color: red">把父类的实例 赋值 给子类的prototype</b>,然后子类 就可以获取到父类的 属性和方法，<b style="color: green">这是为什么呢？这是什么原理呢？</b>这里需要画一张图：<br><img src="/images/extend/extend1.png" alt=""><br>根据上图，我们来分析：<br>(1) Child构造函数为null,除了一个隐式属性<strong>proto</strong><br>(2) c.say()调用，可是c并没有say方法，但是有原型链<br>(3) 根据图中的原型链向上找，发现 父类的实例也没有say方法，然后接着向上，找到父类的原型中的say<br>(4) say中调用了this.name，然后依照上面的顺序重新开始解析name属性<br>ok，是不是已经明白了，那么接下来我们给子类添加一个name属性：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c.<span class="built_in">name</span> = <span class="string">'child'</span>;</div><div class="line">c.<span class="built_in">say</span>(); <span class="comment">//child</span></div></pre></td></tr></table></figure></p>
<p>是不是很好理解了呢。</p>
<h2 id="模式1-缺点"><a href="#模式1-缺点" class="headerlink" title="#模式1. 缺点"></a>#模式1. 缺点</h2><ul>
<li>此模式完全继承了父类的 私有属性(this.) 和 原型属性(prototype)</li>
<li>无法在子类中传参数</li>
<li>如果父类的属性是一个引用类型的，那么子类的修改会影响到父类的对象,demo<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name || <span class="string">"parent"</span>;</div><div class="line">	<span class="keyword">this</span>.info = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">&#125;</div><div class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Parent();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;&#125;</div><div class="line">Child.prototype = p;</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child();</div><div class="line">c.info.push(<span class="string">'d'</span>);</div><div class="line"><span class="built_in">console</span>.log(p.info); <span class="comment">// ["a", "b", "c", "d"]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模式2-借用构造函数"><a href="#模式2-借用构造函数" class="headerlink" title="#模式2. 借用构造函数"></a>#模式2. 借用构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	Parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>熟悉 apply 和 call的同学都明白上面那行代码发生了什么，子类直接获取了父类对象的属性<b style="color: red;">副本</b>。<br>记住，副本这个概念很重要。所以只要你愿意，你可以在子类的构造函数中借用n多父类都可以，类似于多重继承。<br><img src="/images/extend/extend2.png" alt="原理图"></p>
<h2 id="模式2-缺点"><a href="#模式2-缺点" class="headerlink" title="#模式2. 缺点"></a>#模式2. 缺点</h2><p>此种模式有一个致命的缺陷，就是子类和父类相对独立，子类无法获取父类 prototype中的方法和属性，然而一般公用的方法都会放置在 prototype中，不是吗？</p>
<h2 id="模式3-借用和设置原型"><a href="#模式3-借用和设置原型" class="headerlink" title="#模式3. 借用和设置原型"></a>#模式3. 借用和设置原型</h2><p>相信聪明的你看到这里，瞬间就明白要做什么了，对，就是模式1和模式2的合体。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name || <span class="string">'parent'</span>;</div><div class="line">&#125;</div><div class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	Parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();</div></pre></td></tr></table></figure></p>
<h2 id="模式3-缺点"><a href="#模式3-缺点" class="headerlink" title="#模式3. 缺点"></a>#模式3. 缺点</h2><p>父构造函数被调用两次</p>
<h2 id="模式4-直接共享原型"><a href="#模式4-直接共享原型" class="headerlink" title="#模式4. 直接共享原型"></a>#模式4. 直接共享原型</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(C, P)</span></span>&#123;</div><div class="line">	C.prototype = P.prototype;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面几种模式的分析，相信聪明的你一眼就能看出此种模式的优劣。造成父类和子类原型强引用，互相影响。</p>
<h2 id="模式5-借用临时构造函数"><a href="#模式5-借用临时构造函数" class="headerlink" title="#模式5. 借用临时构造函数"></a>#模式5. 借用临时构造函数</h2><p>我们真正想继承的可能只是prototype里面的方法和属相，而不需要添加到 this的，这里还是用模式1和4的合体.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(C, P)</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">	F.prototpe = P.prototype;</div><div class="line">	C.prototype = <span class="keyword">new</span> F();</div><div class="line">	C.prototype.constructor = C;<span class="comment">// 修改构造函数指向</span></div><div class="line">	C.super = P.prototype; <span class="comment">//一般没什么用，存储一下父类</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="终极模式-直接拷贝复制"><a href="#终极模式-直接拷贝复制" class="headerlink" title="#终极模式. 直接拷贝复制"></a>#终极模式. 直接拷贝复制</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一切的继承都只是为了复用，为了解放劳动力！&lt;br&gt;然而遗忘是我们的天性，曾经懂得！&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="继承" scheme="http://donglegend.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>一行神奇的代码</title>
    <link href="http://donglegend.github.io/2017/02/23/%E4%B8%80%E8%A1%8C%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>http://donglegend.github.io/2017/02/23/一行神奇的代码/</id>
    <published>2017-02-23T08:57:19.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>总有一些很神奇的代码，简短的字符间沉淀着厚重的知识和技巧</p>
<p>偶然在网上看到的一个题目。</p>
<h2 id="不同的颜色标记出来页面中各层的HTML"><a href="#不同的颜色标记出来页面中各层的HTML" class="headerlink" title="不同的颜色标记出来页面中各层的HTML"></a>不同的颜色标记出来页面中各层的HTML</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].forEach.call($$(<span class="string">"*"</span>), <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    a.style.outline = <span class="string">"1px solid #"</span> + (~~(<span class="built_in">Math</span>.random() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).toString(<span class="number">16</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>原理：<a href="http://web.jobbole.com/82204/" target="_blank" rel="external">通过一行代码学习javascript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总有一些很神奇的代码，简短的字符间沉淀着厚重的知识和技巧&lt;/p&gt;
&lt;p&gt;偶然在网上看到的一个题目。&lt;/p&gt;
&lt;h2 id=&quot;不同的颜色标记出来页面中各层的HTML&quot;&gt;&lt;a href=&quot;#不同的颜色标记出来页面中各层的HTML&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="code" scheme="http://donglegend.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>前端动画-序列帧动画</title>
    <link href="http://donglegend.github.io/2017/02/10/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB-%E5%BA%8F%E5%88%97%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
    <id>http://donglegend.github.io/2017/02/10/前端动画-序列帧动画/</id>
    <published>2017-02-10T08:49:24.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端写动画的情况不是很多，毕竟性能不是很好。一般网页动效，现在基本用css3就完成了。<br>这里说道说道 用 js脚本完成的动画。</p>
<p>可能很多刚入行的新手觉得写动画很复杂，有抵触心理，确实用脚本可能会涉及到一些逻辑及其设计模式，复杂的程序对技术水平要求比较高。</p>
<p>这里不会深入探究，只做简单引导，希望大家能快速上手写出绚丽吊炸天的动画特效.</p>
<p>废话太多，下面进入正题，本文先讲序列帧动画。</p>
<h2 id="效果预览-源码地址"><a href="#效果预览-源码地址" class="headerlink" title="效果预览 源码地址"></a><a href="http://donglegend.com/effects/animate/frame/index.html" target="_blank" rel="external">效果预览</a> <a href="https://github.com/donglegend/effects/blob/gh-pages/animate/frame/index.html" target="_blank" rel="external">源码地址</a></h2><h2 id="脚本动画原理"><a href="#脚本动画原理" class="headerlink" title="脚本动画原理"></a>脚本动画原理</h2><p>所谓动画，简单讲就是在时间轴上改动元素外貌或者位置。就好比手机拍摄视频，记录下景物的变化。</p>
<h2 id="什么是序列帧"><a href="#什么是序列帧" class="headerlink" title="什么是序列帧"></a>什么是序列帧</h2><p>就是一帧一帧的图像文件,如这匹可爱的小马：<br><img src="/images/animate/horse.jpg" alt="序列帧图"></p>
<h2 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h2><p>把上面的小马从左到右，从上到下，播放一遍，每次展示一匹马的宽度和高度就成了动画</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>为了提高性能，这里用canvas实现</p>
<h3 id="新建index-html文件"><a href="#新建index-html文件" class="headerlink" title="新建index.html文件"></a>新建index.html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">"viewport"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,height=device-height,initial-scale=1,user-scalable=no"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>序列帧动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 画布容器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donglegend"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="comment">//书写脚本</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="分析搭建代码框架"><a href="#分析搭建代码框架" class="headerlink" title="分析搭建代码框架"></a>分析搭建代码框架</h3><p>一切从简，面向过程开始<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要一个主函数 main 作为 程序启动入口</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">//需要创建一个canvas画布</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCanvas</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">//需要加载图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadResource</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 加载完图片需要 把图片画到画布</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 需要一个主循环函数，就是一个定时器，不断刷新画布</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 在loop循环函数里调用 show函数（作用一会就知道了）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 想想还缺少什么，为了方便画图片，可以写一个函数把图片按照区块 划分</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideCoordinate</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="具体功能函数实现"><a href="#具体功能函数实现" class="headerlink" title="具体功能函数实现"></a>具体功能函数实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _W = window.innerWidth,</div><div class="line">    _H = window.innerHeight,</div><div class="line">    _speed = <span class="number">1000</span> / <span class="number">10</span>, <span class="comment">//定时器执行频率</span></div><div class="line">    loopTimer = <span class="keyword">null</span>, <span class="comment">//保存定时器id</span></div><div class="line">    canvasObj = <span class="keyword">null</span>, <span class="comment">//画布</span></div><div class="line">    context = <span class="keyword">null</span>, <span class="comment">// 画布环境句柄</span></div><div class="line">    imageList = [], <span class="comment">// 加载完图片存放地址</span></div><div class="line">    animateList = [], <span class="comment">// 划分图片区域结果</span></div><div class="line">    animateAction = <span class="number">0</span>, <span class="comment">// 序列帧图片第几行</span></div><div class="line">    animateCurframe = <span class="number">0</span>; <span class="comment">// 序列帧图片某行第几帧</span></div><div class="line">main();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    setCanvas(<span class="string">"donglegend"</span>, _W, _H);</div><div class="line">    loadResource(&#123;</div><div class="line">    	<span class="string">'id'</span>: <span class="string">'dongsheng'</span>,</div><div class="line">    	<span class="string">'src'</span>: <span class="string">'images/dongsheng.jpg'</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**	</span></div><div class="line"> * [setCanvas 创建画布]</div><div class="line"> * <span class="doctag">@param</span> &#123;[string]&#125; id [元素容器]</div><div class="line"> * <span class="doctag">@param</span> &#123;[number]&#125; w  [画布宽度]</div><div class="line"> * <span class="doctag">@param</span> &#123;[number]&#125; h  [画布高度]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCanvas</span><span class="params">(id, w, h)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> object = document.getElementById(id);</div><div class="line">    object.innerHTML = <span class="string">'&lt;canvas id="'</span> + id + <span class="string">'_canvas" width="'</span> + _W +<span class="string">'" height="'</span>+_H+<span class="string">'"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/canvas&gt;'</span>;</div><div class="line">    canvasObj = document.getElementById(id + <span class="string">"_canvas"</span>);</div><div class="line">    context = canvasObj.getContext(<span class="string">"2d"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [loadResource 加载图片]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[object]&#125; item [&#123;id: "xx", src: "xx"&#125;]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadResource</span><span class="params">(item)</span></span>&#123;</div><div class="line">	<span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        imageList[item.id] = image;</div><div class="line">        animateList = divideCoordinate(image.width, image.height, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line">        loop();</div><div class="line">    &#125;</div><div class="line">    image.src = item.src;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [divideCoordinate 按区域划分序列帧图片]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; w   [总宽度]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; h   [总高度]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; row [总行数]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; col [总列数]</div><div class="line"> * <span class="doctag">@return</span> &#123;[type]&#125;     [划分结果数组集]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideCoordinate</span><span class="params">(w, h, row, col)</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> i, j, cw = w / col, ch = h / row, r = [], c;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">		c = [];</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</div><div class="line">			c.push(&#123;x : cw * j, y : ch * i, width : cw, height : ch&#125;);</div><div class="line">		&#125;</div><div class="line">		r.push(c);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> r;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [loop 程序主循环，控制页面不断刷新]</div><div class="line"> * <span class="doctag">@return</span> &#123;[type]&#125; [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (loopTimer) &#123;</div><div class="line">        clearInterval(loopTimer);</div><div class="line">    &#125;</div><div class="line">    loopTimer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        show();</div><div class="line">    &#125;, _speed)</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [show 清空画布，展示画布]</div><div class="line"> * <span class="doctag">@return</span> &#123;[type]&#125; [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">    context.fillRect(<span class="number">0</span>, <span class="number">0</span>, _W, _H);</div><div class="line">    draw(context, imageList[<span class="string">'dongsheng'</span>], animateList);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [draw 画图片到画布]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; c          [画布环境句柄]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; bitmapData [图片资源]</div><div class="line"> * <span class="doctag">@param</span>  &#123;[type]&#125; list       [划分区域数组]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">(c, bitmapData, list)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(animateCurframe &gt;= <span class="keyword">list</span>[animateAction].length<span class="number">-1</span>)&#123;</div><div class="line">		animateCurframe = <span class="number">0</span>;</div><div class="line">		animateAction++;</div><div class="line">		<span class="keyword">if</span>(animateAction &gt; <span class="keyword">list</span>.length<span class="number">-1</span>)&#123;</div><div class="line">			animateAction = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		animateCurframe++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> p = <span class="keyword">list</span>[animateAction][animateCurframe];</div><div class="line">	c.drawImage(</div><div class="line">		bitmapData,</div><div class="line">		p.x,</div><div class="line">		p.y,</div><div class="line">		p.width,</div><div class="line">		p.height,</div><div class="line">		(_W - p.width)/<span class="number">2</span>,</div><div class="line">		(_H - p.height)/<span class="number">3</span>,</div><div class="line">		p.width,</div><div class="line">		p.height</div><div class="line">	)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，最简单版本的序列帧动画就完成了，可以自己下载源码修改自己想要的效果<br>旨在理解动画的原理，后续会详细更新 位移动画，比如小球弹跳等等。<br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端写动画的情况不是很多，毕竟性能不是很好。一般网页动效，现在基本用css3就完成了。&lt;br&gt;这里说道说道 用 js脚本完成的动画。&lt;/p&gt;
&lt;p&gt;可能很多刚入行的新手觉得写动画很复杂，有抵触心理，确实用脚本可能会涉及到一些逻辑及其设计模式，复杂的程序对技术水平要求比较高。
    
    </summary>
    
      <category term="动画" scheme="http://donglegend.github.io/categories/%E5%8A%A8%E7%94%BB/"/>
    
    
      <category term="特效" scheme="http://donglegend.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>iphone/ios修改title无效</title>
    <link href="http://donglegend.github.io/2017/02/07/iphone-ios%E4%BF%AE%E6%94%B9title%E6%97%A0%E6%95%88/"/>
    <id>http://donglegend.github.io/2017/02/07/iphone-ios修改title无效/</id>
    <published>2017-02-07T07:36:44.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>动态修改iOS微信浏览器的标题无效解决黑科技</p>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>从后台请求数据，然后动态设置网站标题。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>运行在微信浏览器中，修改之后标题无效。</p>
<h2 id="解决方案-直接上代码"><a href="#解决方案-直接上代码" class="headerlink" title="解决方案(直接上代码)"></a>解决方案(直接上代码)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.title =  <span class="string">"new title"</span>;</div><div class="line"><span class="comment">//判断运行设备</span></div><div class="line"><span class="keyword">if</span> (<span class="regexp">/ip(hone|od|ad)/i</span>.test(navigator.userAgent)) &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    i.src = <span class="string">'/favicon.ico'</span>; <span class="comment">//可以请求任何资源，为了性能，这里请求icon</span></div><div class="line">    i.style.display = <span class="string">'none'</span>;</div><div class="line">    i.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            i.remove();</div><div class="line">        &#125;, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为刷新页面时能及时显示title，所以用iframe做一次伪请求，在body中添加一个iframe标签，请求成功之后再移除dom</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态修改iOS微信浏览器的标题无效解决黑科技&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="title" scheme="http://donglegend.github.io/tags/title/"/>
    
  </entry>
  
  <entry>
    <title>动画特效合集</title>
    <link href="http://donglegend.github.io/2016/12/22/%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88%E5%90%88%E9%9B%86/"/>
    <id>http://donglegend.github.io/2016/12/22/动画特效合集/</id>
    <published>2016-12-22T02:22:23.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><a href="http://donglegend.com/EffectsAnimate/dist/index.html" target="_blank" rel="external">动画特效测试效果整合</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://donglegend.com/EffectsAnimate/dist/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动画特效测试效果整合&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="动画" scheme="http://donglegend.github.io/categories/%E5%8A%A8%E7%94%BB/"/>
    
    
      <category term="特效" scheme="http://donglegend.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>不想懂得</title>
    <link href="http://donglegend.github.io/2016/12/20/%E4%B8%8D%E6%83%B3%E6%87%82%E5%BE%97/"/>
    <id>http://donglegend.github.io/2016/12/20/不想懂得/</id>
    <published>2016-12-20T12:18:54.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一些很重要的东西，很容易弄丢，在我看破以前。</p>
<a id="more"></a>
<hr>
<p>最近有点低落，像帝都天空中的雾霾，浓郁的散也散不开!<br>帝都的雾霾有多浓？帝都已经在空气中隐去，仔细听好像有雾霾颗粒流动的声响!</p>
<p>又一年，每年都叹，叹消逝的流年，叹无奈的生活！那年的梦想或许还是梦想，或许已经不再想象，就是没有实现。</p>
<p>春末夏初，最美好的季节，拔了一颗牙！五月五号那一天，清风拂面细如棉，柳絮漫天迷人眼。就这一天，拔了牙，做了种植体。医药费总共花了两万多大洋，欠了一笔债。种牙真的很疼，手术不到一个小时就完成了，当时蒙着双眼，只听到了敲敲打打的声音。手术完毕，挂消炎药的时候，麻药开始一点点退去，疼痛开始像海浪一样，一波一波的涌来，无休无止，有多疼，疼哭了！</p>
<p>第三天，脸依然肿的很大，三天几乎没有进食，输液消炎的时候，护士都找不着血管，换人扎好几针，后来称体重，一周瘦了十多斤，真的很惨。噢，说到了第三天，周末刚好到了预约学车的时间，依然坚持去学车，没办法开口说话，只能和教练打手势。再艰难的日子，只要还活着，就会慢慢过去，因为不得不过去，时间在向前。有些痛不想再去回忆，就那样整整一个月，肿着脸，也学完了车。依然没有牙，没有切割功能，只能把东西切碎了塞进嘴里。人啊，真是一个很容易习惯环境的动物，就这样过了三个多月，虽然吃东西不便，但至少不痛了。</p>
<p>九月中旬，很巧合的日子，那天正好中秋节啊，医院预约复查，说是还得植骨，就那样五月份的痛就这么突然的又来了一次，很没出息的又疼哭了。真的很疼啊，我都对这个手术产生了恐惧，再也不想体验那种感觉。很郁闷的是，有很多老奶奶老爷爷也做种植，但是她们说不疼，几乎也不会肿，那天旁边坐着一个老奶奶，可能见过可怜吧，陪我说话，还鼓励我，感谢！过去了就过去了，三月一个周期，十二月了，终于看到了曙光，虽然还没完全弄好，已经很满足了。</p>
<p>技术工作就不提了，还是框架构建工具哪一套，重要的还是基础和思维！买了很多书，很多都没读完！</p>
<p>每年都有好多人需要感谢，感谢认识我的我认识的所有人。但有一个人每年都陪我过，王八蛋妞妞。感谢我们还在一起，感谢我们一起走了这么久，感谢我们还将一起走下去。</p>
<p>有时候很怀念以前的我，以为是世界变了，其实是我们不知不觉的变了。锻炼的越来越少，书读的也不多了，在这污糟糟的世界，德智体同步下降，蠢如猪。很多时候，根本不知道自己想要什么，弄丢了自己最重要的东西，还不自知。</p>
<p>污糟糟的世界，污糟糟的空气，眼前有太多的风沙，耳畔有太多的杂音，希望守住自己的宁静！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5248040&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一些很重要的东西，很容易弄丢，在我看破以前。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://donglegend.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://donglegend.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>mac php环境启动</title>
    <link href="http://donglegend.github.io/2016/12/09/mac-php%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8/"/>
    <id>http://donglegend.github.io/2016/12/09/mac-php环境启动/</id>
    <published>2016-12-09T02:16:19.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>mac 环境下，用brew安装php相关环境启动命令</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里php，mysql，nginx都是用brew安装，安装目录默认，在Cellar下面</p>
<h2 id="php-fpm-带配置重启"><a href="#php-fpm-带配置重启" class="headerlink" title="php-fpm 带配置重启"></a>php-fpm 带配置重启</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/*注意权限，加 sudo*/</span></div><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>php56<span class="regexp">/5.6.27_4/</span>sbin<span class="regexp">/php-fpm -c /u</span>sr<span class="regexp">/local/</span>etc<span class="regexp">/php/</span><span class="number">5.6</span><span class="regexp">/php-fpm.conf</span></div></pre></td></tr></table></figure>
<h2 id="nginx-带配置重启"><a href="#nginx-带配置重启" class="headerlink" title="nginx 带配置重启"></a>nginx 带配置重启</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/*注意权限，加 sudo*/</span></div><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>nginx<span class="regexp">/1.10.2_1/</span>bin<span class="regexp">/nginx -c /u</span>sr<span class="regexp">/local/</span>etc<span class="regexp">/nginx/</span>nginx.conf</div></pre></td></tr></table></figure>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/Cellar/my</span>sql<span class="regexp">/5.7.16/</span>support-files<span class="regexp">/mysql.server</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac 环境下，用brew安装php相关环境启动命令&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://donglegend.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="http://donglegend.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>gulp工具rename</title>
    <link href="http://donglegend.github.io/2016/12/08/gulp%E5%B7%A5%E5%85%B7rename/"/>
    <id>http://donglegend.github.io/2016/12/08/gulp工具rename/</id>
    <published>2016-12-08T13:40:21.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>gulp 对文件批量重命名<br><a id="more"></a></p>
<h2 id="gulp-rename重命名"><a href="#gulp-rename重命名" class="headerlink" title="gulp-rename重命名"></a><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">gulp-rename重命名</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);</div><div class="line"></div><div class="line"><span class="comment">// rename via function </span></div><div class="line">gulp.task(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./dist/**/*'</span>)</div><div class="line">    .pipe(rename(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(path)</div><div class="line">      <span class="keyword">var</span> name = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">      path.basename = name;</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'rename/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// rename via hash </span></div><div class="line">gulp.task(<span class="string">'name2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./dist/**/*'</span>)</div><div class="line">    .pipe(rename(&#123;</div><div class="line">	    <span class="attr">dirname</span>: <span class="string">"main"</span>, </div><div class="line">	    <span class="attr">basename</span>: <span class="string">"dong"</span>,</div><div class="line">	    <span class="attr">prefix</span>: <span class="string">""</span>, </div><div class="line">	    <span class="attr">suffix</span>: <span class="string">""</span>, </div><div class="line">	    <span class="attr">extname</span>: <span class="string">""</span></div><div class="line">	&#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'rename/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gulp 对文件批量重命名&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="gulp" scheme="http://donglegend.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>gulp图片压缩</title>
    <link href="http://donglegend.github.io/2016/12/08/gulp%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    <id>http://donglegend.github.io/2016/12/08/gulp图片压缩/</id>
    <published>2016-12-08T13:29:57.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>网页性能优化，通常要处理图片，尤其图片量大的时候，更需要工具来批量处理，这里使用gulp。<br><a id="more"></a></p>
<h2 id="image-resize压缩尺寸"><a href="#image-resize压缩尺寸" class="headerlink" title="image-resize压缩尺寸"></a><a href="https://www.npmjs.com/package/gulp-image-resize" target="_blank" rel="external">image-resize压缩尺寸</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> imageResize = <span class="built_in">require</span>(<span class="string">'gulp-image-resize'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./images/**/*'</span>)</div><div class="line">    .pipe(imageResize(&#123;</div><div class="line">      <span class="attr">width</span>: <span class="number">400</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/resize'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="gulp-imagemin品质压缩"><a href="#gulp-imagemin品质压缩" class="headerlink" title="gulp-imagemin品质压缩"></a><a href="https://www.npmjs.com/package/imagemin-pngquant" target="_blank" rel="external">gulp-imagemin品质压缩</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</div><div class="line">gulp.task(<span class="string">'min'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./images/**/*'</span>)</div><div class="line">    .pipe(imagemin(&#123;</div><div class="line">      <span class="attr">progressive</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">use</span>: [pngquant(&#123;</div><div class="line">        <span class="attr">quality</span>: <span class="string">'65-80'</span></div><div class="line">      &#125;)]</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/min'</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网页性能优化，通常要处理图片，尤其图片量大的时候，更需要工具来批量处理，这里使用gulp。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="gulp" scheme="http://donglegend.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>网页字体设置</title>
    <link href="http://donglegend.github.io/2016/12/08/%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/"/>
    <id>http://donglegend.github.io/2016/12/08/网页字体设置/</id>
    <published>2016-12-08T02:17:40.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>做网页时间也不短了，通常网页字体都是拷贝别人家的 “font-family: Helvetica Neue,Helvetica,Arial,sans-serif”。自己也简单研究和查过一些资料，然而容易遗忘。<br><a id="more"></a></p>
<h2 id="font-family用法"><a href="#font-family用法" class="headerlink" title="font-family用法"></a>font-family用法</h2><p>先行查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family" target="_blank" rel="external">font-family mdn文档概述</a><br>上述文档解释了 <strong>font-family</strong> 的基本使用。</p>
<h2 id="字体种类"><a href="#字体种类" class="headerlink" title="字体种类"></a>字体种类</h2><p>五大类字体</p>
<table>
<thead>
<tr>
<th style="text-align:center">无衬线</th>
<th style="text-align:center">衬线</th>
<th style="text-align:center">等宽</th>
<th style="text-align:center">梦幻</th>
<th style="text-align:center">草体</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sans-serif</td>
<td style="text-align:center">serif</td>
<td style="text-align:center">monospace</td>
<td style="text-align:center">fantasy</td>
<td style="text-align:center">cuisive</td>
</tr>
</tbody>
</table>
<div style="border: 1px #ccc solid;"><div style="font-family: sans-serif;">中文你好donglegend&nbsp;&nbsp;sans-serif(无衬线)</div><div style="font-family: serif;">中文你好donglegend&nbsp;&nbsp;serif(衬线)</div><div style="font-family: monospace;">中文你好donglegend&nbsp;&nbsp;monospace(等宽)</div><div style="font-family: fantasy;">中文你好donglegend&nbsp;&nbsp;&nbsp;&nbsp;fantasy(梦幻)</div><div style="font-family: cuisive;">中文你好donglegend&nbsp;&nbsp;cuisive(草体)</div></div>


<h2 id="各系统默认字体"><a href="#各系统默认字体" class="headerlink" title="各系统默认字体"></a>各系统默认字体</h2><p>偷懒： 摘自 <a href="http://ued.ctrip.com/blog/web-page-font-settings-did-you-know.html" target="_blank" rel="external">携程设计委员会</a><br><img src="/images/css/font-family.jpeg" alt="系统默认字体"></p>
<h2 id="常用配置写法"><a href="#常用配置写法" class="headerlink" title="常用配置写法"></a>常用配置写法</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">font-family</span>: Helvetica, Tahoma, Arial, <span class="string">"Heiti SC"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"WenQuanYi Micro Hei"</span>;</div><div class="line"><span class="attribute">font-family</span>: Helvetica, Tahoma, Arial, <span class="string">"PingFang SC"</span>, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"Heiti SC"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"WenQuanYi Micro Hei"</span>;</div></pre></td></tr></table></figure>
<h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: 12px/1.5 Microsoft YaHei,tahoma,arial,Hiragino Sans GB,<span class="symbol">\\</span>5b8b<span class="symbol">\4</span>f53,sans-serif</div></pre></td></tr></table></figure>
<h2 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">font:</span> <span class="number">12</span>px/<span class="number">1.5</span> tahoma,arial,<span class="string">'Hiragino Sans GB'</span>,<span class="string">'\5b8b\4f53'</span>,sans-serif</div></pre></td></tr></table></figure>
<h2 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">font:</span> <span class="number">14</span>px/<span class="number">1.5</span> <span class="string">"Helvetica Neue"</span>,Helvetica,Arial,<span class="string">"Microsoft Yahei"</span>,<span class="string">"Hiragino Sans GB"</span>,<span class="string">"Heiti SC"</span>,<span class="string">"WenQuanYi Micro Hei"</span>,sans-serif</div></pre></td></tr></table></figure>
<h2 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-<span class="string">family:</span> <span class="string">'Helvetica Neue'</span>,Helvetica,Arial,sans-serif</div></pre></td></tr></table></figure>
<h2 id="他人资料"><a href="#他人资料" class="headerlink" title="他人资料"></a>他人资料</h2><p><a href="https://segmentfault.com/a/1190000006110417" target="_blank" rel="external">来自segmentfault的博文</a>,很不错</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做网页时间也不短了，通常网页字体都是拷贝别人家的 “font-family: Helvetica Neue,Helvetica,Arial,sans-serif”。自己也简单研究和查过一些资料，然而容易遗忘。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://donglegend.github.io/categories/css/"/>
    
    
      <category term="font" scheme="http://donglegend.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>vue2/vuex2的那点坑</title>
    <link href="http://donglegend.github.io/2016/11/24/vue2-vuex2%E7%9A%84%E9%82%A3%E7%82%B9%E5%9D%91/"/>
    <id>http://donglegend.github.io/2016/11/24/vue2-vuex2的那点坑/</id>
    <published>2016-11-24T15:46:16.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>说是坑，其实大部分是我们自己的过错！</p>
<p><a href="https://www.zhihu.com/question/51628897" target="_blank" rel="external">vuex官方demo在1.0可以运行，在2.0报错？</a><br>此类问题，应该很常见吧？</p>
<p>还有顺溜的利用1.0搭建的webpack编译环境到了vue2.0突然失效了，报错了？简直要疯啊</p>
<a id="more"></a>
<h2 id="1-问题一"><a href="#1-问题一" class="headerlink" title="1.问题一"></a>1.问题一</h2><p><b style="color: red;"><br>*Failed to load resource: net::ERR_FILE_NOT_FOUND<br><br>*app.js:16381 Uncaught SyntaxError: Unexpected token import<br></b><br>可能你会疑惑，webpack中明明写了 babel 加载器，query中也写了参数presets，然而 es6 的 import依然不识别，这是为什么呢？<br>答案是如果你的 include 路径没写错，那么 你就应该添加 <b style="color: green; font-size: 20px;">.babelrc</b> 的配置文件,比如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">  <span class="attr">"comments"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-问题二"><a href="#2-问题二" class="headerlink" title="2.问题二"></a>2.问题二</h2><p><b style="color: red;">Failed to mount component: template or render function not defined</b><br>这是什么问题呢？因为是2.0的时代了，但我们没认真看api，可能顺手用了1.0的习惯，很明显template or render是 模版编译渲染问题。<br><a href="http://cn.vuejs.org/v2/guide/installation.html#独立构建-vs-运行时构建" target="_blank" rel="external">官方文档解释  独立构建-vs-运行时构建</a>  解释的多么清楚，一定要看文档<br>默认 NPM 包导出的是 运行时 构建。为了使用独立构建，在 webpack 配置中添加下面的别名：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resolve</span>: &#123;</div><div class="line">  <span class="attribute">alias</span>: &#123;</div><div class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-问题3"><a href="#3-问题3" class="headerlink" title="3.问题3"></a>3.问题3</h2><p><b style="color: red;"><br>vuex官方demo在1.0可以运行，在2.0报错？<br>[Vue warn]: Property or method “counterValue” is not defined<br></b></p>
<p>这又是什么原因呢，因为用着  vue2.0和  vuex2.0 却 使用着 vuex1.0 的语法文档。</p>
<p>什么也不说了，看文档吧  <a href="http://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">Vuex2 中文文档</a></p>
<p>这里有写的一个<a href="http://donglegend.com/effects/vuexscript/demo.html" target="_blank" rel="external">vuex2 demo预览</a> ，<a href="https://github.com/donglegend/vuexscript/tree/master" target="_blank" rel="external">demo源代码</a> 直接使用，无需安装webpack打包，无模块.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说是坑，其实大部分是我们自己的过错！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/51628897&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vuex官方demo在1.0可以运行，在2.0报错？&lt;/a&gt;&lt;br&gt;此类问题，应该很常见吧？&lt;/p&gt;
&lt;p&gt;还有顺溜的利用1.0搭建的webpack编译环境到了vue2.0突然失效了，报错了？简直要疯啊&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="vue" scheme="http://donglegend.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>web自动化工具-Browsersync</title>
    <link href="http://donglegend.github.io/2016/11/19/web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7-Browsersync/"/>
    <id>http://donglegend.github.io/2016/11/19/web自动化工具-Browsersync/</id>
    <published>2016-11-19T09:12:37.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>browser-sync才是神器中的神器，和livereload一样支持监听所有文件。可是和livereload简单粗暴的F5刷新相比，browsersync的局部刷新造成了本质的区别，推荐使用browsersync。<br>browser-sync更是可以做到多页面终端同步，文件同步，交互同步，神器也。<br><a id="more"></a><br><a href="https://browsersync.io/" target="_blank" rel="external">browser-sync官方文档</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装即可：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="keyword">install</span> -g browser-<span class="keyword">sync</span></div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>静态站，直接到项目目录启动即可:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">browser-sync <span class="keyword">start</span> <span class="comment">--server --files "**"</span></div><div class="line">// 参数 files 后面是路径，这里要监听所有文件，写了 **</div><div class="line">[BS] <span class="keyword">Access</span> URLs:</div><div class="line"> <span class="comment">------------------------------------</span></div><div class="line">       <span class="keyword">Local</span>: <span class="keyword">http</span>://localhost:<span class="number">3000</span></div><div class="line">    <span class="keyword">External</span>: <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">3000</span></div><div class="line"> <span class="comment">------------------------------------</span></div><div class="line">          UI: <span class="keyword">http</span>://localhost:<span class="number">3001</span></div><div class="line"> UI <span class="keyword">External</span>: <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">3001</span></div><div class="line"> <span class="comment">------------------------------------</span></div><div class="line">[BS] Serving files <span class="keyword">from</span>: ./</div><div class="line">[BS] Watching files...</div></pre></td></tr></table></figure></p>
<p>启动后，就可以愉快的玩耍了,自己试试体验更好。</p>
<p>上面启动之后，会自动启动浏览器，同时我们可以看到启动了两个端口的服务，打开下面3001的端口，可以看到配置页面，请自行修改配置体验效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;browser-sync才是神器中的神器，和livereload一样支持监听所有文件。可是和livereload简单粗暴的F5刷新相比，browsersync的局部刷新造成了本质的区别，推荐使用browsersync。&lt;br&gt;browser-sync更是可以做到多页面终端同步，文件同步，交互同步，神器也。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="tool" scheme="http://donglegend.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>web自动化工具-livereload</title>
    <link href="http://donglegend.github.io/2016/11/19/web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7-livereload/"/>
    <id>http://donglegend.github.io/2016/11/19/web自动化工具-livereload/</id>
    <published>2016-11-19T08:29:27.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>livereload是一个很神奇的工具，主要解放了F5键，监听文件变动，整个页面自动刷新。<br>可搭载gulp等构建工具使用。和liveStyle 针对样式文件相比，可监听任何文件。<br><a id="more"></a></p>
<p> <a href="https://www.npmjs.com/package/livereload" target="_blank" rel="external">livereload文档</a></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul>
<li>打开Chrome网上应用商店，安装插件livereload.</li>
<li>打开终端控制台<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="keyword">install</span> -g livereload</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>路径切到项目目录，启动服务（这里依然使用http-server启动）。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">http</span>-server</div><div class="line">Starting up <span class="keyword">http</span>-server, serving ./</div><div class="line">Available <span class="keyword">on</span>:</div><div class="line">  <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></div><div class="line">  <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">8080</span></div></pre></td></tr></table></figure>
</li>
<li><p>路径切到项目目录，启动livereload。（切到项目目录，是为了只监听本项目文件，防止监听文件过多，造成机器卡顿）</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">livereload</div><div class="line">Starting LiveReload v0.6.0 <span class="keyword">for</span> /Users/xudongsheng/Documents/project/web-auto-tool/livereload on<span class="built_in"> port </span>35729.</div></pre></td></tr></table></figure>
</li>
<li><p>启动Chrome浏览器，打开服务文件，启动 livereload插件，插件中心的空心圈圈会变成实心圆圈。<br>打开控制台，开启插件的时候，细心的同学可能会发现dom中多了一行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:35729/livereload.js?ext=Chrome&amp;amp;extver=2.1.0"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">//注意端口号：35729，想具体了解原理的，自行查找资料即可。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，相信你就可以愉快的体验 自动刷新功能了，赶快试试吧。</p>
<h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>当然，具体到项目都是搭载脚本使用的，这些教程应该有很多，推荐参考官方教程使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;livereload是一个很神奇的工具，主要解放了F5键，监听文件变动，整个页面自动刷新。&lt;br&gt;可搭载gulp等构建工具使用。和liveStyle 针对样式文件相比，可监听任何文件。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="tool" scheme="http://donglegend.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>web自动化工具-liveStyle</title>
    <link href="http://donglegend.github.io/2016/11/19/web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7-liveStyle/"/>
    <id>http://donglegend.github.io/2016/11/19/web自动化工具-liveStyle/</id>
    <published>2016-11-19T08:00:29.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>LiveStyle. The first bi-directional real-time edit tool for CSS, LESS and SCSS<br>主要用来编写 样式文件，可以做到 浏览器和编辑器双向同步。<br><a id="more"></a><br>具体安装和使用以及demo，官方有视频，说的很好了，这里简单写写。<br>推荐先安装一款 <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="external">启动服务插件http-server</a></p>
<h2 id="demo效果"><a href="#demo效果" class="headerlink" title="demo效果"></a>demo效果</h2><p><img src="/images/tool/liveStyle.gif" alt="liveStyle demo"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>方法1<br>打开<a href="http://livestyle.io/" target="_blank" rel="external">liveStyle官网</a><br>点击 Download App 的按钮,下载解压<br>运行程序，有两个按钮，一个安装Chrome插件，一个安装 Sublime Text插件</p>
</li>
<li><p>方法2<br>打开Chrome网上应用商店，搜索  liveStyle,添加到扩展程序<br>打开sublime编辑器，搜索 liveStyle, 安装(如何安装sublime插件，百度即可)</p>
</li>
</ul>
<p>注意：<b style="color: red;">sublime编辑器，必须是 3以上版本。</b></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如下图，打开刚安装的Chrome插件，开启liveStyle<br><img src="/images/tool/liveStyleChrome.png" alt="liveStyle start"></p>
<p>demo里启动服务，使用的  node的 插件 http-server.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LiveStyle. The first bi-directional real-time edit tool for CSS, LESS and SCSS&lt;br&gt;主要用来编写 样式文件，可以做到 浏览器和编辑器双向同步。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="tool" scheme="http://donglegend.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>web自动化工具-开篇</title>
    <link href="http://donglegend.github.io/2016/11/19/web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7-%E5%BC%80%E7%AF%87/"/>
    <id>http://donglegend.github.io/2016/11/19/web自动化工具-开篇/</id>
    <published>2016-11-19T07:40:11.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几年，前端技术风一样的速度迭代更新，各种框架工具雨后春笋般涌现，作为一个平凡的开发者，也只能在洪流中沉沉浮浮，微不足道，以前前端叫做切图仔、美工，如今改了称号叫前端工程师，哎!<br><a id="more"></a><br>nodeJs兴起之后，前端开发环境也随着迭代更新，为了提升开发效率，这里先介绍几种 <strong>所见即所得web前端开发自动化工具</strong>。</p>
<p>以前未解放生产力的时候，通常前端开发者是这样工作的：<b style="color: red;">编写代码 —-&gt; 切换到浏览器，F5刷新<b>。</b></b></p>
<p>人都是懒惰的，我们想解放F5键，我们想让浏览器自动刷新，我们说要有工具，于是就有了辅助工具。</p>
<p>这里主要介绍3种：</p>
<ul>
<li><a href="http://livestyle.io/" target="_blank" rel="external">liveStyle</a></li>
<li><a href="https://www.npmjs.com/package/livereload" target="_blank" rel="external">livereload</a></li>
<li><a href="https://browsersync.io/" target="_blank" rel="external">browser-sync</a></li>
</ul>
<p>具体使用方法和场景下面分篇详细介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几年，前端技术风一样的速度迭代更新，各种框架工具雨后春笋般涌现，作为一个平凡的开发者，也只能在洪流中沉沉浮浮，微不足道，以前前端叫做切图仔、美工，如今改了称号叫前端工程师，哎!&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="tool" scheme="http://donglegend.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构-链表</title>
    <link href="http://donglegend.github.io/2016/11/08/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
    <id>http://donglegend.github.io/2016/11/08/javascript数据结构-链表/</id>
    <published>2016-11-08T04:10:18.000Z</published>
    <updated>2017-06-28T02:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>链表 是一种物理存储单元上非连续、非顺序的存储结构，它既可以表示线性结构，也可以用于表示非线性结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p>
<h2 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Node</span><span class="params">(element)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.element = element;</div><div class="line">		<span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> head = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加数据-链表尾部"><a href="#添加数据-链表尾部" class="headerlink" title="添加数据(链表尾部)"></a>添加数据(链表尾部)</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">append = function(element) &#123;</div><div class="line">	var <span class="keyword">node</span> <span class="title">= new</span> <span class="keyword">Node</span><span class="title">(element</span>);</div><div class="line">	if (!head) &#123;</div><div class="line">		head = <span class="keyword">node</span><span class="title">;</span></div><div class="line">	&#125; else &#123;</div><div class="line">		var current = head;</div><div class="line">		while (current.next) &#123;</div><div class="line">			current = current.next;</div><div class="line">		&#125;</div><div class="line">		current.next = <span class="keyword">node</span><span class="title">;</span></div><div class="line">	&#125;</div><div class="line">	length++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入数据（任意位置）"><a href="#插入数据（任意位置）" class="headerlink" title="插入数据（任意位置）"></a>插入数据（任意位置）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">insert = <span class="function"><span class="keyword">function</span>(<span class="params">element, position</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!position || !element)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> current = head,</div><div class="line">		previous = <span class="literal">null</span>,</div><div class="line">		index = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length<span class="number">-1</span>)&#123;</div><div class="line">		<span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</div><div class="line">			node.next = current;</div><div class="line">			head = node;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">while</span>(index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></div><div class="line">				<span class="attr">previous</span> = <span class="string">current;</span></div><div class="line">				<span class="attr">current</span> = <span class="string">current.next;</span></div><div class="line">			&#125;</div><div class="line">			<span class="attr">node.next</span> = <span class="string">current;</span></div><div class="line">			<span class="attr">previous.next</span> = <span class="string">node;</span></div><div class="line">		&#125;</div><div class="line">		<span class="attr">length</span>++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除数据（某个位置）"><a href="#删除数据（某个位置）" class="headerlink" title="删除数据（某个位置）"></a>删除数据（某个位置）</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">removeAt = <span class="function"><span class="keyword">function</span><span class="params">(position)</span></span> &#123;</div><div class="line">	var current = head,</div><div class="line">		previous = null,</div><div class="line">		<span class="built_in">index</span> = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">position</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">position</span> &lt;= length-<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">position</span> == <span class="number">0</span>)&#123;</div><div class="line">			head = current.next;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">while</span>(<span class="built_in">index</span>++ &lt; <span class="keyword">position</span>)&#123;</div><div class="line">				previous = current;</div><div class="line">				current = current.next;</div><div class="line">			&#125;</div><div class="line">			previous.next = current.next;</div><div class="line">		&#125;</div><div class="line">		length--;</div><div class="line">		<span class="keyword">return</span> current.element;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="索引查找"><a href="#索引查找" class="headerlink" title="索引查找"></a>索引查找</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">indexOf = <span class="function"><span class="keyword">function</span><span class="params">(element)</span></span> &#123;</div><div class="line">	var current = head,</div><div class="line">		<span class="built_in">index</span> = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(current)&#123;</div><div class="line">		<span class="keyword">if</span>(element == current.element)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="built_in">index</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">index</span>++;</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除数据（按数据）"><a href="#删除数据（按数据）" class="headerlink" title="删除数据（按数据）"></a>删除数据（按数据）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">remove = <span class="function"><span class="keyword">function</span><span class="params">(element)</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> index = <span class="keyword">this</span>.indexOf(element);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">isEmpty = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></div><div class="line">	<span class="keyword">return</span> <span class="built_in">length</span> == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据大小"><a href="#数据大小" class="headerlink" title="数据大小"></a>数据大小</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">size</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></div><div class="line">	<span class="keyword">return</span> <span class="built_in">length</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取第一个节点数据"><a href="#获取第一个节点数据" class="headerlink" title="获取第一个节点数据"></a>获取第一个节点数据</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getHead = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> head.element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">toString = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> current = head;</div><div class="line">	<span class="keyword">var</span> s = <span class="string">""</span>;</div><div class="line">	<span class="keyword">while</span>(current)&#123;</div><div class="line">		s += (<span class="string">","</span>+current.element);</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s.substr(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="打印，辅助函数"><a href="#打印，辅助函数" class="headerlink" title="打印，辅助函数"></a>打印，辅助函数</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</div><div class="line">	console.<span class="built_in">log</span>(this.toString())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Node</span><span class="params">(element)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.element = element;</div><div class="line">		<span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> head = <span class="literal">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span><span class="params">(element)</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</div><div class="line">		<span class="keyword">if</span> (!head) &#123;</div><div class="line">			head = node;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">var</span> current = head;</div><div class="line">			<span class="keyword">while</span> (current.next) &#123;</div><div class="line">				current = current.next;</div><div class="line">			&#125;</div><div class="line">			current.next = node;</div><div class="line">		&#125;</div><div class="line">		length++;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span><span class="params">(element, position)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(!position || !element)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> current = head,</div><div class="line">			previous = <span class="literal">null</span>,</div><div class="line">			index = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</div><div class="line">				node.next = current;</div><div class="line">				head = node;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">while</span>(index++ &lt; position)&#123;</div><div class="line">					previous = current;</div><div class="line">					current = current.next;</div><div class="line">				&#125;</div><div class="line">				node.next = current;</div><div class="line">				previous.next = node;</div><div class="line">			&#125;</div><div class="line">			length++;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span><span class="params">(position)</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> current = head,</div><div class="line">			previous = <span class="literal">null</span>,</div><div class="line">			index = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</div><div class="line">				head = current.next;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">while</span>(index++ &lt; position)&#123;</div><div class="line">					previous = current;</div><div class="line">					current = current.next;</div><div class="line">				&#125;</div><div class="line">				previous.next = current.next;</div><div class="line">			&#125;</div><div class="line">			length--;</div><div class="line">			<span class="keyword">return</span> current.element;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span><span class="params">(element)</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> index = <span class="keyword">this</span>.indexOf(element);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.indexOf = <span class="function"><span class="keyword">function</span><span class="params">(element)</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> current = head,</div><div class="line">			index = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(current)&#123;</div><div class="line">			<span class="keyword">if</span>(element == current.element)&#123;</div><div class="line">				<span class="keyword">return</span> index;</div><div class="line">			&#125;</div><div class="line">			index++;</div><div class="line">			current = current.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> length == <span class="number">0</span>;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> length;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.getHead = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> head.element;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">var</span> current = head;</div><div class="line">		<span class="keyword">var</span> s = <span class="string">""</span>;</div><div class="line">		<span class="keyword">while</span>(current)&#123;</div><div class="line">			s += (<span class="string">","</span>+current.element);</div><div class="line">			current = current.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> s.substr(<span class="number">1</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">		console.log(<span class="keyword">this</span>.toString())</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链表 是一种物理存储单元上非连续、非顺序的存储结构，它既可以表示线性结构，也可以用于表示非线性结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据
    
    </summary>
    
      <category term="javascript" scheme="http://donglegend.github.io/categories/javascript/"/>
    
    
      <category term="数据结构" scheme="http://donglegend.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
